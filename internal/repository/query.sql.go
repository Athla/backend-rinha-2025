// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const createPaymentRecord = `-- name: CreatePaymentRecord :one
INSERT INTO PAYMENTS (
  CORRELATION_ID, AMOUNT, TIMESTAMP
) VALUES (
  ?, ?, ?
)
RETURNING correlation_id, amount, timestamp
`

type CreatePaymentRecordParams struct {
	CorrelationID interface{}
	Amount        interface{}
	Timestamp     sql.NullTime
}

func (q *Queries) CreatePaymentRecord(ctx context.Context, arg CreatePaymentRecordParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPaymentRecord, arg.CorrelationID, arg.Amount, arg.Timestamp)
	var i Payment
	err := row.Scan(&i.CorrelationID, &i.Amount, &i.Timestamp)
	return i, err
}

const getAllPayments = `-- name: GetAllPayments :many
SELECT CORRELATION_ID, AMOUNT, TIMESTAMP FROM PAYMENTS
ORDER BY TIMESTAMP DESC
`

func (q *Queries) GetAllPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(&i.CorrelationID, &i.Amount, &i.Timestamp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentByCorrelationId = `-- name: GetPaymentByCorrelationId :one
SELECT CORRELATION_ID, AMOUNT, TIMESTAMP FROM PAYMENTS
WHERE CORRELATION_ID = ? LIMIT 1
`

func (q *Queries) GetPaymentByCorrelationId(ctx context.Context, correlationID interface{}) (Payment, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByCorrelationId, correlationID)
	var i Payment
	err := row.Scan(&i.CorrelationID, &i.Amount, &i.Timestamp)
	return i, err
}

const getPaymentsByInterval = `-- name: GetPaymentsByInterval :many
SELECT CORRELATION_ID, AMOUNT, TIMESTAMP FROM PAYMENTS
WHERE TIMESTAMP BETWEEN ? AND ?
ORDER BY TIMESTAMP DESC
`

type GetPaymentsByIntervalParams struct {
	FromTimestamp sql.NullTime
	ToTimestamp   sql.NullTime
}

func (q *Queries) GetPaymentsByInterval(ctx context.Context, arg GetPaymentsByIntervalParams) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsByInterval, arg.FromTimestamp, arg.ToTimestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(&i.CorrelationID, &i.Amount, &i.Timestamp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
